import Joi from 'joi';
import fs from 'fs/promises';
import path from 'path';
import YAML from 'yaml';
import { LOG_LEVELS } from './logger.js';

const schema = Joi.object({
  siteUrl: Joi.string().uri().required(),
  clientId: Joi.string().required(),
  clientSecret: Joi.string().required(),
  syncInterval: Joi.number().integer().min(10).description('–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö').default(60),
  logLevel: Joi.string().valid(...Object.values(LOG_LEVELS)).description('–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (debug, info, none)').default(LOG_LEVELS.INFO),
  defaultReloadPolicy: Joi.string().valid('restart', 'recreate').description('–ü–æ–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é').default('recreate'),
  services: Joi.array().items(
    Joi.object({
      name: Joi.string().required(),
      container: Joi.string().required(),
      envFile: Joi.string().required().description('–ò–º—è —Ñ–∞–π–ª–∞ .env (–±–µ–∑ –ø—É—Ç–∏)'),
      projectId: Joi.string().required(),
      environment: Joi.string().required(),
      syncInterval: Joi.number().integer().min(10).description('–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞'),
      reloadPolicy: Joi.string().valid('restart', 'recreate').description('–ü–æ–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞'),
      overrides: Joi.object({
        siteUrl: Joi.string().uri(),
        clientId: Joi.string(),
        clientSecret: Joi.string()
      }).optional()
    })
  )
});

export async function loadConfig(configPath) {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const filePath = configPath || process.env.CONFIG_PATH || './config.yaml';
  
  try {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    const absolutePath = path.isAbsolute(filePath) ? filePath : path.resolve(process.cwd(), filePath);
    console.log(`üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑: ${absolutePath}`);
    
    const raw = await fs.readFile(absolutePath, 'utf8');
    const parsed = YAML.parse(raw);
    
    // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º envPath –≤ envFile –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (parsed.services) {
      for (const service of parsed.services) {
        if (service.envPath && !service.envFile) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø—É—Ç–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
          service.envFile = path.basename(service.envPath);
          delete service.envPath;
        }
      }
    }
    
    const { error, value } = schema.validate(parsed);
    
    if (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`);
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ env —Ñ–∞–π–ª–∞–º
    for (const service of value.services) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—É—Ç–µ–π: /app/envs/–ù–ê–ó–í–ê–ù–ò–ï_—Å–µ—Ä–≤–∏—Å–∞/–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ñ–∞–π–ª–∞
      const serviceDir = path.join('/app/envs', service.name);
      service.envPath = path.join(serviceDir, service.envFile);
      console.log(`üîç –§–∞–π–ª .env –¥–ª—è ${service.name}: ${service.envPath}`);
    }
    
    return value;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–∑ ${filePath}: ${error.message}`);
    throw error;
  }
} 