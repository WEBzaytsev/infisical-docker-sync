import Docker from 'dockerode';
import { info, error } from './logger.js';
import fs from 'fs';
const docker = new Docker({ socketPath: '/var/run/docker.sock' });

export async function restartContainer(containerName) {
  try {
    info(`üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${containerName}...`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const containers = await docker.listContainers({
      all: true,
      filters: { name: [containerName] }
    });
    
    if (containers.length === 0) {
      error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }
    
    const container = docker.getContainer(containerName);
    await container.restart();
    info(`‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω`);
  } catch (err) {
    error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ ${containerName}: ${err.message}`);
  }
}

export async function reloadContainer(containerName) {
  try {
    info(`üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${containerName}...`);
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const containers = await docker.listContainers({
      all: true,
      filters: { name: [containerName] }
    });
    
    if (containers.length === 0) {
      error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }
    
    const containerInfo = containers[0];
    const container = docker.getContainer(containerInfo.Id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const state = await container.inspect();
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
    if (state.State.Running) {
      info(`‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName}`);
      await container.stop();
    }
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    info(`üóëÔ∏è –£–¥–∞–ª—è—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName}`);
    await container.remove();
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–Ω–æ–≤–æ —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    info(`üÜï –°–æ–∑–¥–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName} –∑–∞–Ω–æ–≤–æ`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const imageId = containerInfo.Image;
    const createOptions = {
      name: containerName,
      Image: imageId,
      Cmd: containerInfo.Command.split(' '),
      HostConfig: {
        Binds: state.HostConfig.Binds,
        PortBindings: state.HostConfig.PortBindings,
        NetworkMode: state.HostConfig.NetworkMode,
        RestartPolicy: state.HostConfig.RestartPolicy
      },
      Env: state.Config.Env
    };
    
    const newContainer = await docker.createContainer(createOptions);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    info(`‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName}`);
    await newContainer.start();
    
    info(`‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω`);
  } catch (err) {
    error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ ${containerName}: ${err.message}`);
  }
}

export async function reloadWithCompose(containerName, envPath) {
  try {
    // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    const containers = await docker.listContainers({
      all: true,
      filters: { name: [containerName] }
    });
    
    if (containers.length === 0) {
      error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    const containerInfo = containers[0];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Labels –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è docker-compose
    const labels = containerInfo.Labels || {};
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–µ—Ä–µ–∑ docker-compose
    if (!labels['com.docker.compose.project']) {
      // –ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–µ—Ç–∫–∏ docker-compose, –∏—Å–ø–æ–ª—å–∑—É–µ–º recreate
      info(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName} –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ docker-compose, –∏—Å–ø–æ–ª—å–∑—É–µ–º recreate`);
      await reloadContainer(containerName);
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ compose-–ø—Ä–æ–µ–∫—Ç–µ –∏–∑ –º–µ—Ç–æ–∫
    const composeProject = labels['com.docker.compose.project'];
    
    info(`üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${containerName} –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ ${composeProject}`);
    
    // –ü—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
      const container = docker.getContainer(containerInfo.Id);
      const inspect = await container.inspect();
      
      info(`–û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ ${containerName}`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
      const currentEnv = inspect.Config.Env || [];
      info(`–¢–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${currentEnv.length} —à—Ç`);
      
      // –ß–∏—Ç–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª
      try {
        info(`–ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É: ${envPath}`);
        
        if (envPath && fs.existsSync(envPath)) {
          const envContent = fs.readFileSync(envPath, 'utf8');
          const envVars = {};
          
          // –ü–∞—Ä—Å–∏–º .env —Ñ–∞–π–ª –≤ –æ–±—ä–µ–∫—Ç
          envContent.split('\n').forEach(line => {
            if (line && !line.startsWith('#')) {
              const [key, ...valueParts] = line.split('=');
              if (key) {
                envVars[key.trim()] = valueParts.join('=').trim();
              }
            }
          });
          
          info(`–ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${Object.keys(envVars).length} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞ ${envPath}`);
          
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏ —Ç–µ, 
          // –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ .env, –∏ –æ–±–Ω–æ–≤–ª—è—è —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
          const updatedEnv = [];
          const processedKeys = new Set();
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
          for (const envVar of currentEnv) {
            const [name] = envVar.split('=');
            const key = name.trim();
            
            if (Object.prototype.hasOwnProperty.call(envVars, key)) {
              // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –µ—Å—Ç—å –≤ .env, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
              updatedEnv.push(`${key}=${envVars[key]}`);
              processedKeys.add(key);
            } else {
              // –ò–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
              updatedEnv.push(envVar);
            }
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
          for (const [key, value] of Object.entries(envVars)) {
            if (!processedKeys.has(key)) {
              updatedEnv.push(`${key}=${value}`);
            }
          }
          
          info(`–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${updatedEnv.length} —à—Ç`);
          
          // –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
          if (inspect.State.Running) {
            info(`–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName}...`);
            await container.stop();
          }
          
          info(`–£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName}...`);
          await container.remove();
          
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
          const createOptions = {
            name: containerName,
            Image: containerInfo.Image,
            Cmd: inspect.Config.Cmd,
            Entrypoint: inspect.Config.Entrypoint,
            Env: updatedEnv,  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            Labels: inspect.Config.Labels,
            HostConfig: {
              Binds: inspect.HostConfig.Binds,
              PortBindings: inspect.HostConfig.PortBindings,
              NetworkMode: inspect.HostConfig.NetworkMode,
              RestartPolicy: inspect.HostConfig.RestartPolicy,
              Mounts: inspect.HostConfig.Mounts,
              Devices: inspect.HostConfig.Devices,
              CapAdd: inspect.HostConfig.CapAdd,
              CapDrop: inspect.HostConfig.CapDrop
            }
          };
          
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          const newContainer = await docker.createContainer(createOptions);
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω
          if (inspect.State.Running) {
            info(`–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName}...`);
            await newContainer.start();
          }
          
          info(`‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è`);
          return;
        } else {
          info('–ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ');
        }
      } catch (envErr) {
        error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ .env —Ñ–∞–π–ª–∞: ${envErr.message}`);
        info('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ');
      }
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      await reloadContainer(containerName);
    } catch (inspectErr) {
      error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: ${inspectErr.message}`);
      info('–ü—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞');
      await reloadContainer(containerName);
    }
  } catch (err) {
    error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å docker-compose: ${err.message}`);
    await reloadContainer(containerName);
  }
}

export async function reloadService(service, reloadPolicy) {
  const policy = reloadPolicy || 'recreate';
  
  switch (policy) {
    case 'restart':
      await restartContainer(service.container);
      break;
    case 'compose':
      await reloadWithCompose(service.container, service.envPath);
      break;
    case 'recreate':
    default:
      await reloadContainer(service.container);
      break;
  }
} 