import Docker from 'dockerode';
import { info, error, debug } from './logger.js';

const docker = new Docker({ socketPath: '/var/run/docker.sock' });

export async function restartContainer(containerName) {
  try {
    info(`üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${containerName}...`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const containers = await docker.listContainers({
      all: true,
      filters: { name: [containerName] }
    });
    
    if (containers.length === 0) {
      error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }
    
    const container = docker.getContainer(containerName);
    await container.restart();
    info(`‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω`);
  } catch (err) {
    error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ ${containerName}: ${err.message}`);
  }
}

export async function reloadContainer(containerName) {
  try {
    info(`üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${containerName}...`);
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const containers = await docker.listContainers({
      all: true,
      filters: { name: [containerName] }
    });
    
    if (containers.length === 0) {
      error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }
    
    const containerInfo = containers[0];
    const container = docker.getContainer(containerInfo.Id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const state = await container.inspect();
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
    if (state.State.Running) {
      info(`‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName}`);
      await container.stop();
    }
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    info(`üóëÔ∏è –£–¥–∞–ª—è—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName}`);
    await container.remove();
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–Ω–æ–≤–æ —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    info(`üÜï –°–æ–∑–¥–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName} –∑–∞–Ω–æ–≤–æ`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const imageId = containerInfo.Image;
    const createOptions = {
      name: containerName,
      Image: imageId,
      Cmd: containerInfo.Command.split(' '),
      HostConfig: {
        Binds: state.HostConfig.Binds,
        PortBindings: state.HostConfig.PortBindings,
        NetworkMode: state.HostConfig.NetworkMode,
        RestartPolicy: state.HostConfig.RestartPolicy
      },
      Env: state.Config.Env
    };
    
    const newContainer = await docker.createContainer(createOptions);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    info(`‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName}`);
    await newContainer.start();
    
    info(`‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω`);
  } catch (err) {
    error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ ${containerName}: ${err.message}`);
  }
}

export async function reloadService(service, reloadPolicy) {
  const policy = reloadPolicy || 'recreate';
  
  switch (policy) {
    case 'restart':
      await restartContainer(service.container);
      break;
    case 'recreate':
    default:
      await reloadContainer(service.container);
      break;
  }
} 