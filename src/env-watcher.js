import fs from 'fs/promises';
import crypto from 'crypto';
import path from 'path';
import { info, error, debug } from './logger.js';

/**
 * –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */
function hash(data) {
  return crypto.createHash('sha256').update(data).digest('hex');
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –Ω–æ–≤—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
 * 
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É .env
 * @param {string} newContent - –ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
 * @returns {Promise<boolean>} - True –µ—Å–ª–∏ —Ñ–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 */
export async function hasChanged(filePath, newContent) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à –Ω–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    const newHash = hash(newContent);
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
      const existing = await fs.readFile(filePath, 'utf8');
      const existingHash = hash(existing);
      
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö–µ—à–∏
      const changed = existingHash !== newHash;
      
      if (changed) {
        info(`üìä –§–∞–π–ª ${filePath} –∏–∑–º–µ–Ω–∏–ª—Å—è:`);
        info(`  - –°—Ç–∞—Ä—ã–π —Ö–µ—à: ${existingHash.slice(0, 10)}...`);
        info(`  - –ù–æ–≤—ã–π —Ö–µ—à: ${newHash.slice(0, 10)}...`);
        
        // –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç–ª–∏—á–∞—é—â–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏
        const existingLines = existing.split('\n').sort();
        const newLines = newContent.split('\n').sort();
        
        // –ù–∞–π–¥–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        const addedLines = newLines.filter(line => !existingLines.includes(line));
        if (addedLines.length > 0) {
          info(`  - –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${addedLines.length}`);
        }
        
        // –ù–∞–π–¥–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        const removedLines = existingLines.filter(line => !newLines.includes(line));
        if (removedLines.length > 0) {
          info(`  - –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${removedLines.length}`);
        }
      }
      
      return changed;
    } catch (err) {
      // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
      info(`üìÅ –§–∞–π–ª ${filePath} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω`);
      return true;
    }
  } catch (err) {
    error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${err.message}`);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ
    return true;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è .env —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 * 
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É .env
 */
export async function ensureEnvDir(filePath) {
  const dir = path.dirname(filePath);
  await fs.mkdir(dir, { recursive: true });
}

/**
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * –≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑–≤–Ω–µ
 * 
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
 * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
 */
/*
export function watchFile(filePath, callback) {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º fs.watch API –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ
    const watcher = fs.watch(filePath, { encoding: 'utf8' }, 
      (eventType, filename) => {
        if (eventType === 'change') {
          console.log(`üìù –§–∞–π–ª ${filename} –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –∏–∑–≤–Ω–µ`);
          callback(filename);
        }
      }
    );
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º watcher, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    return watcher;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ —Ñ–∞–π–ª–æ–º: ${error.message}`);
    return null;
  }
}
*/ 