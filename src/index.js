import { loadConfig } from './config-loader.js';
import { fetchEnv } from './infisical-client.js';
import { hasChanged, ensureEnvDir } from './env-watcher.js';
import { restartContainer } from './docker-manager.js';
import { watchConfig } from './config-watcher.js';
import { setLogLevel, info, debug, error, warn } from './logger.js';
import fs from 'fs/promises';
import path from 'path';

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
const timers = new Map();

async function syncService(service, globalConfig) {
  try {
    const merged = {
      siteUrl: service.overrides?.siteUrl || globalConfig.siteUrl,
      clientId: service.overrides?.clientId || globalConfig.clientId,
      clientSecret: service.overrides?.clientSecret || globalConfig.clientSecret,
      environment: service.environment,
      projectId: service.projectId
    };

    info(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${service.name}...`);
    const envVars = await fetchEnv(merged);
    
    if (Object.keys(envVars).length === 0) {
      warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è ${service.name}`);
      return;
    }
    
    const envText = Object.entries(envVars)
      .map(([k, v]) => `${k}=${v}`)
      .sort() // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
      .join('\n');

    await ensureEnvDir(service.envPath);
    const changed = await hasChanged(service.envPath, envText);
    
    if (changed) {
      info(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${Object.keys(envVars).length} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è ${service.name}`);
      await fs.writeFile(service.envPath, envText);
      await restartContainer(service.container);
    } else {
      info(`‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è ${service.name} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å (${Object.keys(envVars).length} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)`);
    }
  } catch (err) {
    error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ${service.name}: ${err.message}`);
  }
}

function setupServiceSync(service, globalConfig) {
  // –û—Å—Ç–∞–Ω–æ–≤–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
  if (timers.has(service.name)) {
    clearInterval(timers.get(service.name));
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞)
  const intervalMs = (service.syncInterval || globalConfig.syncInterval || 60) * 1000;
  
  // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
  if (service.syncInterval) {
    info(`‚è±Ô∏è –°–µ—Ä–≤–∏—Å ${service.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${service.syncInterval} —Å–µ–∫—É–Ω–¥`);
  }
  
  // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  syncService(service, globalConfig);
  
  // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const timer = setInterval(() => {
    info(`‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${service.name} (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${intervalMs/1000}—Å)`);
    syncService(service, globalConfig);
  }, intervalMs);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
  timers.set(service.name, timer);
}

// –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
const configPath = process.env.CONFIG_PATH || path.resolve('./config.yaml');

async function reloadConfig() {
  try {
    info("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...");
    
    // –í ESM –º–æ–¥—É–ª—è—Ö –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ require.cache, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∑–∞–Ω–æ–≤–æ
    const config = await loadConfig(configPath);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setLogLevel(config.logLevel);
    
    info(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${config.services.length} —Å–µ—Ä–≤–∏—Å–æ–≤`);
    
    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
    for (const [name, timer] of timers.entries()) {
      clearInterval(timer);
      debug(`‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è ${name}`);
    }
    timers.clear();
    
    // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    for (const service of config.services) {
      setupServiceSync(service, config);
    }
    
    info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞");
  } catch (err) {
    error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", err.message);
  }
}

async function main() {
  try {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ Infisical Docker Sync");
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const config = await loadConfig(configPath);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setLogLevel(config.logLevel);
    
    info(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${config.services.length} —Å–µ—Ä–≤–∏—Å–æ–≤`);
    info(`‚è±Ô∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${config.syncInterval} —Å–µ–∫—É–Ω–¥`);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ —Ñ–∞–π–ª–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    watchConfig(configPath, reloadConfig);
    
    // –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    for (const service of config.services) {
      setupServiceSync(service, config);
    }
    
  } catch (err) {
    error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", err.message);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç–∞–π–º–µ—Ä—ã...");
  for (const timer of timers.values()) {
    clearInterval(timer);
  }
  process.exit(0);
});

process.on('SIGTERM', () => {
  info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç–∞–π–º–µ—Ä—ã...");
  for (const timer of timers.values()) {
    clearInterval(timer);
  }
  process.exit(0);
});

main(); 